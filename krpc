#!/usr/bin/env bash
# krpc - Kodi jsonRPC 
# Author: Spencer Butler <spencerunderground>
# Attempt to control Kodi's RPC interface
# be careful with syntax. a space in " jsonrpc" had me fucked up for too long...

# TODO these aren't actually reliable, yet
# exit 0 = no error
# exit 1 = error
# exit 3 = no input

#######################################
# DOESNT WORK WITH IPs yet (unless you escape the d(\.)ts
# TODO add support for multiple accounts/hosts/ports
# change these to suit your needs
# or put them in your ~/.krpc.cfg
# if you put your changes here,
# kill the if statement below
user=kodi
pass=kodi
host=localhost
port=80

if [[ ~/.krpc.cfg ]]; then
   source ~/.krpc.cfg
else
   echo "You don't have a ~/.krpc.cfg file, proceeding anyway"
fi
#
#######################################

run=$1
rpc=jsonrpc
ver='2.0'
kv_rpc="\"${rpc}\": \"${ver}\""

id=666
kv_id="\"id\": ${id}"

header='--header content-type:application/json'
url=http://$user:$pass@$host:$port/$rpc
curlopts='--silent --data-binary'

# the playerid is needed to interact with any player calls
# they are alphabetical
# the audio pid is 0
# the video pid is 1

# make sure the tools we call are available
required="curl jq"
for req in $required; do
    pkg=$(type -p $req)
    if [[ ! -x $pkg ]]; then
        echo "$req is not installed."
 
        # see if we can guess their package system
        pkgmgr="apt-get yum zipper pacman portage"
        for p in $pkgmgr; do
            mgr=$(type -p $p)
            if [[ -x $mgr ]]; then
                echo "Try: $mgr install $req"
                exit 3
            fi
        done
        echo "I couldn't find your package manager."
        echo "You need to install $req to use $0."
        exit 3
    fi
done

#TODO this is starting to get unwieldy, maybe printf instead?
help=$(echo -e "usage: $0 [Option] <param>\n
    Requires: $required\n
    Player Options: (media type is autodetected)
    -seek --seek <seconds>\t negatives rewind :: values < 60 start at that sec
    -sf --seek-forward\t\t seek small forward
    -sb --seek-backward\t\t seek small backward
    -gn --goto-next\t\t goto next item in playlist
    -gp --goto-previous\t\t goto previous item in playlist
    -pi --player-info\t\t query current playing media
    -p --pause\t\t\t pause the current media source
    -po --player-open\t\t currently [mostly] broken
    -pm --party-mode\t\t start new music partymode
    -v --volume <increment|decrement> or <0..100>\n
    Library Options:
    -as --audio-scan\t\t scan the audio library for new content
    -ac --audio-clean\t\t clean the audio library
    -vs --video-scan\t\t scan the video library for new content
    -vc --video-clean\t\t clean the video library\n
    GUI Options:
    -gg --go-gui <action>\tone of the following <action>
    \t\t\t\tBack         Info   ShowCodec
    \t\t\t\tContextMenu  Left   ShowOSD
    \t\t\t\tDown         Right  ShowPlayerProcessInfo
    \t\t\t\tSelect       Up     ExecuteAction
    \t\t\t\tHome         SendText\n
    Debug Options:
    -ad --ad-hoc <method> <key> <value>
    -ff --free-form <valid json query>
    -m --methods\t\t see valid methods
    -i --introspect <method>\t debug stuff")

if [ ! "$1" ]; then
   echo "${help}"
   exit 3
fi

########################################################
# functions because curl's quoting standards make me mad
########################################################
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#..# get the media type
get_media_type() {

met=\"Player.GetActivePlayers\"

   pid=$(fetch | jq '.result[] | .playerid')
}


#..# simple method to fetch info on one method
fetch() { 

kv_met="\"method\": ${met}"

curl ${curlopts} \
   "{ ${kv_rpc}, ${kv_met}, ${kv_id}
    }" \
        ${header} ${url} | jq '.'
}


#..# pause current media source
pause() { 

kv_met="\"method\": ${met}"
kv_pid="\"playerid\": ${pid}"

curl ${curlopts} \
   "{ ${kv_rpc}, ${kv_met}, ${kv_id}, \"params\":
        { ${kv_pid} }
    }" \
        ${header} ${url} #| jq '.'
}


#..# investigate available methods
introspect() {

curl ${curlopts} \
   "{ ${kv_rpc}, ${kv_id}, \"method\": \"JSONRPC.Introspect\", \"params\":
        { \"filter\":
            { \"id\": ${met}, \"type\": \"method\" }
        }
    }" \
        ${header} ${url} | jq '.'
}


#..# get info on current playing media
player_info() {

kv_met="\"method\": ${met}"

if [[ $pid == 0 ]]; then
    properties='"duration", "album", "artist"'
elif [[ $met == "\"Player.GetProperties\"" ]]; then
    properties='"partymode", "speed", "time",
                "percentage", "totaltime", "playlistid",
                "position", "repeat", "shuffled", "canseek",
                "canchangespeed", "canmove", "canzoom",
                "canrotate", "canshuffle", "canrepeat"'
elif [[ $pid == 1 ]]; then
    properties='"runtime", "lastplayed", "resume",
    "plot", "showtitle", "season", "episode"'
else
    properties='"foo", "bar"'
fi

# these go after the conditionals
kv_pid="\"playerid\": ${pid}"
kv_prop="\"properties\": [ ${properties} ]"

curl ${curlopts} \
   "{ ${kv_rpc}, ${kv_id}, ${kv_met}, \"params\":
        { ${kv_pid}, ${kv_prop} }
    }" \
      ${header} ${url} | jq '.'
}


#..# navigate current media
player_goto() {

kv_met="\"method\": ${met}"
kv_pid="\"playerid\": ${pid}"
re="^(true|false)$"

if [[ $val =~ $re ]]; then
    kv="\"${key}\": ${val}"
else
    kv="\"${key}\": \"${val}\""
fi

curl ${curlopts} \
   "{ ${kv_rpc}, ${kv_id}, ${kv_met}, \"params\":
        { ${kv_pid}, ${kv} }
    }" \
       ${header} ${url} | jq '.'
}


#..# navigate current media
player_seek() {

kv_met="\"method\": ${met}"
kv_pid="\"playerid\": ${pid}"
kv_name="\"${name}\": { \"${key}\": ${val} }"

curl ${curlopts} \
   "{ ${kv_rpc}, ${kv_id}, ${kv_met}, \"params\":
        { ${kv_pid}, ${kv_name} }
    }" \
      ${header} ${url} | jq '.result'
}


#..# retuns the key/val pairs for a method
one_kv() {

kv_met="\"method\": ${met}"
kv="\"${key}\": \"${val}\""

if [ "$val" -ge 0 ]; then   # don't use "[[ ]]" here because, bash
kv="\"${key}\": ${val}"     # don't quote integers, but do quote strings
    curl ${curlopts} \
       "{ ${kv_rpc}, ${kv_id}, ${kv_met}, \"params\":
            { ${kv} }
        }" \
          ${header} ${url} | jq '.'
else
    curl ${curlopts} \
       "{ ${kv_rpc}, ${kv_id}, ${kv_met}, \"params\":
            { ${kv} }
        }" \
          ${header} ${url} | jq '.'
fi
}

#..# free form query\n
#..# the quotes for "${freeform}" are vital for this to work
#..# otherwise bash gets all escapy and fucks * up
#..# YOU DO _still_ have to SINGLE quoute your <freeform> on the cli
#..# $freeform is any valid query you stumble across
#..# we just supply curl and url and jq for pretty fun times")
free_form() {

freeform=$val

curl ${curlopts} \
    "${freeform}" ${header} ${url} | jq '.'
}


#..# open player
player_open() {

kv_met="\"method\": ${met}"
kv_opt="\"${optkey}\": \"${optval}\""

if [ $ival -ge 0 ]; then
    kv_item="\"${ikey}\": ${ival}"
else
    kv_item="\"${ikey}\": \"${ival}\""
fi

curl ${curlopts} \
    "{ ${kv_rpc}, ${kv_id}, ${kv_met}, \"params\":
        { \"item\":
            { $kv_item }, \"options\":
                { ${kv_opt} }
        }
     }" \
        ${header} ${url} | jq '.'
}


#..# real partymode
player_party() {

kv_met="\"method\": ${met}"
kv_item="\"${ikey}\": \"${ival}\""

curl ${curlopts} \
    "{ ${kv_rpc}, ${kv_id}, ${kv_met}, \"params\":
        { \"item\": 
                { $kv_item }
        }
     }" \
        ${header} ${url} | jq '.'
}
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
########################################################



########################################################
# what to do, what to do...
########################################################

# fetch the media type once
get_media_type

# parse user input
case "$run" in
-h|--help)
    echo -e "$help"
    
   ;;

# Player Options
-seek|--seek)
    if [[ ! $2 ]]; then
        echo "usage: $0 -seek <seconds>"
        echo "NOTE: values less than 60 will start you at that spot BUGID"
        echo "negative values rewind"
        echo "BUGID: https://forum.kodi.tv/showthread.php?tid=237408"
    exit 3
    fi

    met=\"Player.Seek\"
    name=value
    # key can be:
    # seconds(int)
    # percentage(float?/int)
    # (% of time that is left to play, not the duration of the media),
    # time (time doesn't work, it wants an object?
    key=seconds
    val=$2
         player_seek
    met=\"Player.GetItem\"
         player_info
    ;;
 
-gp|--goto-previous)
    met=\"Player.GoTo\"
    key=to
    val=previous
        player_goto 1>/dev/null
    met=\"Player.GetItem\"
        player_info
    ;;
 
-gn|--goto-next)
    met=\"Player.GoTo\"
    key=to
    val=next
        player_goto 1>/dev/null
    met=\"Player.GetItem\"
        player_info
    ;;
 
-sf|--seek-forward)
    met=\"Player.Seek\"
    key=value
    val=smallforward
        player_goto
    met=\"Player.GetItem\"
        player_info
    ;;
 
-sb|--seek-backward)
    met=\"Player.Seek\"
    key=value
    val=smallbackward
        player_goto
    ;;
 
-pi|--player-info)
    met=\"Player.GetItem\"
        player_info
    ;;
 
-pt|--player-time)
    met=\"Player.GetProperties\"
        player_info
    ;;
 
-po|--player-open)
    if [[ ! $5 ]]; then
        echo "usage: $0 $1 item value option value"
        echo -e "\t$0 $1 songid 9406 repeat one"
        echo 'this barely works at the moment...'
        exit 3
    fi

    met=\"Player.Open\"
    ikey=$2 # can be <path|songid>
    ival=$3 # /path/to|int
    optkey=$4 # can be <shuffled|reapeat>
    optval=$5 # can be boolean|one,all
        player_open
    ;;
 
-pm|--party-mode)
    met=\"Player.Open\"
    ikey=partymode
    ival=music
        player_party 1>/dev/null
    met=\"Player.GetItem\"
        player_info
    ;;
 
-ff|--free-form)
    if [[ ! $2 ]]; then
        echo -e "usage: $0 $1 <valid jsonrpc query>"
        echo -e "\t$0 supplies only curl and url and jq for pretty fun times"
        exit 3
    fi
    val=$2
        free_form
    ;;
 
-p|--pause)
    player=$(fetch | jq '.result[] | .type')
    met=\"Player.PlayPause\"
        echo -e "$player pause was toggled"
        pause 1>/dev/null
    met=\"Player.GetItem\"
        player_info
    ;;
 
-v|--volume)
    met=\"Application.SetVolume\"
    key=volume
    val=$2
        one_kv
    ;;
 
# Library Options
-as|--audio-scan)
    met=\"AudioLibrary.Scan\"
        fetch
    ;;
 
-ac|--audio-clean)
    met=\"AudioLibrary.Clean\"
        fetch
    ;;
 
-vs|--video-scan)
    met=\"VideoLibrary.Scan\"
        fetch
    ;;
 
-vc|--video-clean)
    met=\"VideoLibrary.Clean\"
        fetch
    ;;
 
# GUI Options
-gg|--go-gui)
    if [[ ! $2 ]]; then
        echo "usage: $0 -gg <action>"
        echo -e "where <action> is one of:\n"
        echo -e "\tBack         Info   ShowCodec"
        echo -e "\tContextMenu  Left   ShowOSD"
        echo -e "\tDown         Right  ShowPlayerProcessInfo"
        echo -e "\tSelect       Up     ExecuteAction"
        echo -e "\tHome         SendText\n"
        echo "case insensitive"
        exit 3
    fi

    met=\"'Input'.$2\"
        fetch 1>/dev/null
    ;;
 
# Debug Options
-i|--introspect)
    met=\"$2\"
        introspect | jq '.'
    ;;
 
-m|--methods)
    curl --silent "${url}" | jq '.methods | keys'
    ;;
 
-ad|--ad-hoc)
    if [[ ! $4 ]]; then
        echo -e "USAGE: $0 $1 <method> <key> <val>\n"
        echo -e "find an interesting <method> with:\n $0 --methods\n"
        echo -e "get details on <method> with:\n $0 --introspect <method>\n"
        echo -e "then try $0 $1 again\n"
        exit 3
    fi
    met=\"$2\"
    key=$3
    val=$4
        one_kv
    ;;
 
 **)
    echo ${help}
    ;;
esac

# END


#############################3
# hints
#############################3

# all the enums
# '{ "id": 1, "jsonrpc": "2.0", "method": "Player.GetProperties", "params": { "playerid": 1, "properties": [ "partymode",  "speed",  "time",  "percentage",  "totaltime",  "playlistid",  "position",  "repeat",  "shuffled",  "canseek",  "canchangespeed",  "canmove",  "canzoom",  "canrotate",  "canshuffle",  "canrepeat",  "currentaudiostream", "audiostreams" ] } }'

# open song
# '{"jsonrpc":"2.0","id":1,"method":"Player.Open","params":{"item":{"songid": 1},"options":{"repeat":"one"}}}'

# real partymode
# '{ "jsonrpc": "2.0", "id": 666, "method": "Player.Open", "params": { "item": { "partymode": "music" } } }'

#################################################################################
# Player.Open model (the surrounding ", are for vimcolor only, use ' quotes for real
#   "{ "jsonrpc": "2.0", "id": 666, "method": "Player.Open", "params":
#            { "item":
#               { "Playlistid": { "position": int },          # not sure here
#                 "path": "/path", "random", bool, "recursive": bool,
#                 "partymode": { "type": "music" }, "channelid": "Library.ID",
#                 "recordingid": "Library.ID",
#   			},
#            "options":
#               { "playername": "name of player?", "repeat": "one|all",
#                 "resume": [ bool, percentage, int?time? ],
#                 "shuffled": bool
#   			}
#             }
#   }"
#################################################################################



#################################################################################
# Player.Open working partymode
#   "{ "jsonrpc": "2.0", "id": 666, "method": "Player.Open", "params":
#       { "item":
#               { "partymode": "music"
#               }
#       }
#   }"
#################################################################################



